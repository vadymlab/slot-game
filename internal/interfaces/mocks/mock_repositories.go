// Code generated by MockGen. DO NOT EDIT.
// Source: repositories.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	models "github.com/vadymlab/slot-game/internal/models"
)

// MockIUserRepository is a mock of IUserRepository interface.
type MockIUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIUserRepositoryMockRecorder
}

// MockIUserRepositoryMockRecorder is the mock recorder for MockIUserRepository.
type MockIUserRepositoryMockRecorder struct {
	mock *MockIUserRepository
}

// NewMockIUserRepository creates a new mock instance.
func NewMockIUserRepository(ctrl *gomock.Controller) *MockIUserRepository {
	mock := &MockIUserRepository{ctrl: ctrl}
	mock.recorder = &MockIUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserRepository) EXPECT() *MockIUserRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIUserRepository) Create(ctx context.Context, user *models.User) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, user)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockIUserRepositoryMockRecorder) Create(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIUserRepository)(nil).Create), ctx, user)
}

// Deposit mocks base method.
func (m *MockIUserRepository) Deposit(ctx context.Context, userId uint, amount float64) (*float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deposit", ctx, userId, amount)
	ret0, _ := ret[0].(*float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Deposit indicates an expected call of Deposit.
func (mr *MockIUserRepositoryMockRecorder) Deposit(ctx, userId, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deposit", reflect.TypeOf((*MockIUserRepository)(nil).Deposit), ctx, userId, amount)
}

// GetByExternalId mocks base method.
func (m *MockIUserRepository) GetByExternalID(ctx context.Context, id *uuid.UUID) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByExternalID", ctx, id)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByExternalId indicates an expected call of GetByExternalId.
func (mr *MockIUserRepositoryMockRecorder) GetByExternalId(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByExternalID", reflect.TypeOf((*MockIUserRepository)(nil).GetByExternalID), ctx, id)
}

// GetById mocks base method.
func (m *MockIUserRepository) GetByID(ctx context.Context, id uint) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockIUserRepositoryMockRecorder) GetById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockIUserRepository)(nil).GetByID), ctx, id)
}

// GetByLogin mocks base method.
func (m *MockIUserRepository) GetByLogin(ctx context.Context, login string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByLogin", ctx, login)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByLogin indicates an expected call of GetByLogin.
func (mr *MockIUserRepositoryMockRecorder) GetByLogin(ctx, login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByLogin", reflect.TypeOf((*MockIUserRepository)(nil).GetByLogin), ctx, login)
}

// Withdraw mocks base method.
func (m *MockIUserRepository) Withdraw(ctx context.Context, userId uint, amount float64) (*float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Withdraw", ctx, userId, amount)
	ret0, _ := ret[0].(*float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Withdraw indicates an expected call of Withdraw.
func (mr *MockIUserRepositoryMockRecorder) Withdraw(ctx, userId, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Withdraw", reflect.TypeOf((*MockIUserRepository)(nil).Withdraw), ctx, userId, amount)
}

// MockIWalletRepository is a mock of IWalletRepository interface.
type MockIWalletRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIWalletRepositoryMockRecorder
}

// MockIWalletRepositoryMockRecorder is the mock recorder for MockIWalletRepository.
type MockIWalletRepositoryMockRecorder struct {
	mock *MockIWalletRepository
}

// NewMockIWalletRepository creates a new mock instance.
func NewMockIWalletRepository(ctrl *gomock.Controller) *MockIWalletRepository {
	mock := &MockIWalletRepository{ctrl: ctrl}
	mock.recorder = &MockIWalletRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIWalletRepository) EXPECT() *MockIWalletRepositoryMockRecorder {
	return m.recorder
}

// GetBalance mocks base method.
func (m *MockIWalletRepository) GetBalance(ctx context.Context, userId uint) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", ctx, userId)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalance indicates an expected call of GetBalance.
func (mr *MockIWalletRepositoryMockRecorder) GetBalance(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockIWalletRepository)(nil).GetBalance), ctx, userId)
}

// MockISlotRepository is a mock of ISlotRepository interface.
type MockISlotRepository struct {
	ctrl     *gomock.Controller
	recorder *MockISlotRepositoryMockRecorder
}

// MockISlotRepositoryMockRecorder is the mock recorder for MockISlotRepository.
type MockISlotRepositoryMockRecorder struct {
	mock *MockISlotRepository
}

// NewMockISlotRepository creates a new mock instance.
func NewMockISlotRepository(ctrl *gomock.Controller) *MockISlotRepository {
	mock := &MockISlotRepository{ctrl: ctrl}
	mock.recorder = &MockISlotRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISlotRepository) EXPECT() *MockISlotRepositoryMockRecorder {
	return m.recorder
}

// AddSpin mocks base method.
func (m *MockISlotRepository) AddSpin(ctx context.Context, spin *models.Spin) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSpin", ctx, spin)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddSpin indicates an expected call of AddSpin.
func (mr *MockISlotRepositoryMockRecorder) AddSpin(ctx, spin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSpin", reflect.TypeOf((*MockISlotRepository)(nil).AddSpin), ctx, spin)
}

// GetSpins mocks base method.
func (m *MockISlotRepository) GetSpins(ctx context.Context, userId uint) ([]*models.Spin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSpins", ctx, userId)
	ret0, _ := ret[0].([]*models.Spin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSpins indicates an expected call of GetSpins.
func (mr *MockISlotRepositoryMockRecorder) GetSpins(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpins", reflect.TypeOf((*MockISlotRepository)(nil).GetSpins), ctx, userId)
}
