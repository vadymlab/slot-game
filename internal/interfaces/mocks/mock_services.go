// Code generated by MockGen. DO NOT EDIT.
// Source: services.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	models "github.com/vadymlab/slot-game/internal/models"
)

// MockIUserService is a mock of IUserService interface.
type MockIUserService struct {
	ctrl     *gomock.Controller
	recorder *MockIUserServiceMockRecorder
}

// MockIUserServiceMockRecorder is the mock recorder for MockIUserService.
type MockIUserServiceMockRecorder struct {
	mock *MockIUserService
}

// NewMockIUserService creates a new mock instance.
func NewMockIUserService(ctrl *gomock.Controller) *MockIUserService {
	mock := &MockIUserService{ctrl: ctrl}
	mock.recorder = &MockIUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserService) EXPECT() *MockIUserServiceMockRecorder {
	return m.recorder
}

// Deposit mocks base method.
func (m *MockIUserService) Deposit(ctx context.Context, userId *uuid.UUID, amount float64) (*float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deposit", ctx, userId, amount)
	ret0, _ := ret[0].(*float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Deposit indicates an expected call of Deposit.
func (mr *MockIUserServiceMockRecorder) Deposit(ctx, userId, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deposit", reflect.TypeOf((*MockIUserService)(nil).Deposit), ctx, userId, amount)
}

// GetByExternalID mocks base method.
func (m *MockIUserService) GetByExternalID(ctx context.Context, id *uuid.UUID) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByExternalID", ctx, id)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByExternalId indicates an expected call of GetByExternalId.
func (mr *MockIUserServiceMockRecorder) GetByExternalId(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByExternalID", reflect.TypeOf((*MockIUserService)(nil).GetByExternalID), ctx, id)
}

// GetByID mocks base method.
func (m *MockIUserService) GetByID(ctx context.Context, id uint) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockIUserServiceMockRecorder) GetById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockIUserService)(nil).GetByID), ctx, id)
}

// Login mocks base method.
func (m *MockIUserService) Login(ctx context.Context, login, password string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, login, password)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockIUserServiceMockRecorder) Login(ctx, login, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockIUserService)(nil).Login), ctx, login, password)
}

// Register mocks base method.
func (m *MockIUserService) Register(ctx context.Context, login, password string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, login, password)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockIUserServiceMockRecorder) Register(ctx, login, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockIUserService)(nil).Register), ctx, login, password)
}

// Withdraw mocks base method.
func (m *MockIUserService) Withdraw(ctx context.Context, userId *uuid.UUID, amount float64) (*float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Withdraw", ctx, userId, amount)
	ret0, _ := ret[0].(*float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Withdraw indicates an expected call of Withdraw.
func (mr *MockIUserServiceMockRecorder) Withdraw(ctx, userId, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Withdraw", reflect.TypeOf((*MockIUserService)(nil).Withdraw), ctx, userId, amount)
}

// MockISlotService is a mock of ISlotService interface.
type MockISlotService struct {
	ctrl     *gomock.Controller
	recorder *MockISlotServiceMockRecorder
}

// MockISlotServiceMockRecorder is the mock recorder for MockISlotService.
type MockISlotServiceMockRecorder struct {
	mock *MockISlotService
}

// NewMockISlotService creates a new mock instance.
func NewMockISlotService(ctrl *gomock.Controller) *MockISlotService {
	mock := &MockISlotService{ctrl: ctrl}
	mock.recorder = &MockISlotServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISlotService) EXPECT() *MockISlotServiceMockRecorder {
	return m.recorder
}

// History mocks base method.
func (m *MockISlotService) History(ctx context.Context, userId *uuid.UUID) ([]*models.Spin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "History", ctx, userId)
	ret0, _ := ret[0].([]*models.Spin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// History indicates an expected call of History.
func (mr *MockISlotServiceMockRecorder) History(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "History", reflect.TypeOf((*MockISlotService)(nil).History), ctx, userId)
}

// RetrySpin mocks base method.
func (m *MockISlotService) RetrySpin(ctx context.Context, userId *uuid.UUID, betAmount float64) (*models.Spin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetrySpin", ctx, userId, betAmount)
	ret0, _ := ret[0].(*models.Spin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrySpin indicates an expected call of RetrySpin.
func (mr *MockISlotServiceMockRecorder) RetrySpin(ctx, userId, betAmount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrySpin", reflect.TypeOf((*MockISlotService)(nil).RetrySpin), ctx, userId, betAmount)
}
